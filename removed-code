    /**
     *function from InventaireController
     *  @Route("/inventaire/type/scanner/{reactRouting}", name="inventaire_scanner", defaults={"reactRouting": null})
     * 
    */
    public function scanner(Request $request): Response 
    {
        $structure= $_GET['structure'];
        $service= $_GET['service'];
        $biens = $this->entityManager->getRepository(Bien::class)->findAll($service);
        $array=array();
        foreach ($biens as &$value) {
            $unites=$value->getUniteBiens();
            foreach ($unites as &$unite) {
                array_push($array,$unite);
            }
            #dd($array[4]);
        }


        #$str = $this->entityManager->getRepository(Structure::class)->findAll();

        $classMetadataFactory = new ClassMetadataFactory(new AnnotationLoader(new AnnotationReader()));
        $normalizer = new ObjectNormalizer($classMetadataFactory);
        $defaultContext = [
            AbstractNormalizer::CIRCULAR_REFERENCE_HANDLER => function ($object, $format, $context) {
                return $object->getName();
            },
        ];


        $serializer = new Serializer([$normalizer]);

        #$data = $serializer->normalize($str, null, ['groups' => 'api']);
        $data = $serializer->normalize($array, null, ['groups' => 'api']);
        $response = new Response(json_encode($data));
        $response->headers->set('Content-Type', 'application/json');
        $response->headers->set('Access-Control-Allow-Origin', '*');
        return $response;
    }



 from api function in the same controller


          $array=array();
        foreach ($biens as &$value) {
            $unites=$value->getUniteBiens();
            foreach ($unites as &$unite) {
                array_push($array,$unite);
                //array est la liste des biens.
            }
        $classMetadataFactory = new ClassMetadataFactory(new AnnotationLoader(new AnnotationReader()));
        $normalizer = new ObjectNormalizer($classMetadataFactory);
        $defaultContext = [
            AbstractNormalizer::CIRCULAR_REFERENCE_HANDLER => function ($object, $format, $context) {
                return $object->getName();
            },
        ];
        $serializer = new Serializer([$normalizer]);
        #$data = $serializer->normalize($str, null, ['groups' => 'api']);
        $data = $serializer->normalize($array, null, ['groups' => 'api']);
        $response = new Response(json_encode($data));
        $response->headers->set('Content-Type', 'application/json');
        return $response;  
    }


    from restful.html.twig
        <table class="table">
        <thead>
            <tr>
                <th scope="col">Designation</th>
                <th scope="col">Référence Unite</th>
                <th scope="col">nombre inventaires</th>
                <th scope="col">Etat physique</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td id="unite"></td>
            </tr>
        </tbody>
    </table>


    from inventaire.js function getQr
        /*fetch(url, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },

    })
    .then(response => response.json())
    .then(response => console.log(response))
    .then(function display(response){
        element= document.getElementById('unite');

    })

    function data(){
        return{ unite: null,}
    }
    axios.get(url).then(response => (this.unite=response)).then(response=>console.log(response))*/
